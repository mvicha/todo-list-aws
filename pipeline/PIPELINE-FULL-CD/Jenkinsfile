def cloneGit(branchName) {
  stage("Clone ${branchName} Repo") {
    // Limpiamos el entorno antes de comenzar
    deleteDir()
    git branch: branchName,
      credentialsId: "${env.CODECOMMIT_ID}",
      url: "${env.GIT_REPO}"
  }
}

def configGit(gitUsername, gitEmail) {
  stage('Config git globals') {
    sh("""
      git config user.name '${gitUsername}'
      git config user.email '${gitEmail}'
    """)
  }
}

def buildJob(jobName) {
  stage("Build ${jobName}") {
    def job = build job: jobName
  }
}
def mergeGit(origin, dest) {
  stage("Merge ${origin} into ${dest}") {
    sh("""
      git merge origin/${origin}
      git branch --set-upstream-to=origin/${dest} ${dest}
    """)
  }
}
def pushGit(origin) {
  stage("Push ${origin} merged changes") {
    withCredentials([sshUserPrivateKey(credentialsId: "${env.CODECOMMIT_ID}", keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USERNAME')]) {
      withEnv(["GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no -o User=${SSH_USERNAME} -i ${SSH_KEY}"]) {
        sh "git push origin ${origin}"
      }
    }
  }
}

node {
  try {
    /*
      Clonamos dev para configurar
    */
    cloneGit('staging')

    /*
      Configuramos git para que utilice un nombre de usuario y un email
    */
    configGit('Jenkins Pipeline', 'jenkins@pipeline.com')

    /*
      Comenzamos con la construcci贸n del pipeline de staging
    */
    buildJob('PIPELINE-FULL-STAGING')

    /*
        Habiendo finalizado Staging correctamente clonamos, mergeamos y pusheamos a producci贸n
    */
    // Clonamos
    cloneGit('master')
    // Mergeamos
    mergeGit('staging', 'master')
    // Pusheamos
    pushGit('master')

    /*
      Habiendo mergeado correctamente comenzamos con la construcci贸n del pipeline de producci贸n
    */
    buildJob('PIPELINE-FULL-PRODUCTION')
  } catch(e) {
    println "Failed because of $e"
    currentBuid.result = "FAILURE"
  } finally {
    /*
      Limpiamos el entorno al finalizar
    */
    stage('Cleanup') {
      deleteDir()
    }
  }
}

